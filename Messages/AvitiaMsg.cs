using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;

using System.Timers;
using System.Threading;
using System.Threading.Tasks;
using Avitia.Library;

namespace Avitia.Controller.Messages
{
    #region Namespace Description
    /// <summary>
    /// </summary>
    /// <remarks>Required External Packages
    /// <list type="bullet">
    ///     <item></item>
    /// </list>
    /// </remarks>
    [System.Runtime.CompilerServices.CompilerGenerated]
    class NamespaceDoc
    {
    }
    
    #endregion

    /// <summary>
    /// Base class for all Avitia system messages
    /// </summary>
    public class AvitiaMsg : IDisposable
    {
        /// <summary>
        /// Gets the date and time on the sending computer that initiated the message 
        /// </summary>
        public DateTime SentTime { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public MessageType messageType { get; set; }
        /// <summary>
        /// Route message to this service 
        /// </summary>
        public NodeServiceIdentifier ServiceDestination 
        { 
            get; set; 
        }
        /// <summary>
        /// message originated from this service 
        /// </summary>
        public NodeServiceIdentifier ServiceSource 
        { 
            get; set; 
        }

        /// <summary>
        /// contains application-specific information that you can use to 
        /// organize different types of messages.
        /// </summary>
        public int AppSpecific { get; set; }
        /// <summary>
        /// An object that specifies the message contents. 
        /// The Body property can be any serializable object, such as a text string, structure object, class instance, or embedded object.
        /// The BodyType property indicates the type of information that is stored in the message body.
        /// </summary>
        public Object Body { get; set; }
        /// <summary>
        /// A Stream that contains the serialized information included in the Body of the message.
        /// Specify either the Body property or the BodyStream property before 
        /// sending the Message object. If you set the Body property, 
        /// the contents are serialized into the BodyStream property. 
        /// </summary>
        public Stream BodyStream { get; set; }
        /// <summary>
        ///  message's unique identifier, which is generated by Message Queuing
        ///  The identifier is composed of 20 bytes and includes two items: 
        ///  
        ///  (1) machine Guid of the sending computer 
        ///  (2) unique identifier for the message on the computer. 
        ///  The combination of the two items produces a message identifier that is unique on the network.
        /// </summary>
        public Guid Id { get; set; }


        /// <summary>
        /// Use this overload to create a new instance of the Message class 
        /// that contains the Body specified by the body parameter. 
        /// The body parameter can be any object that can be serialized, 
        /// such as a text string, a structure object, a class instance, or an embedded object. 
        /// 
        /// The ActiveXMessageFormatter and BinaryMessageFormatter serialize 
        /// the data into binary representation. The ActiveXMessageFormatter is 
        /// used when sending or receiving COM m_nodecomponents.
        /// </summary>
        /// <param name="body">message body content</param>
        /// <param name="_type"></param>
        /// <param name="source">message source/originator</param>
        /// <param name="destination">message destination</param>
        public AvitiaMsg(
            Object _body,
            MessageType _type,
            NodeServiceIdentifier _source,
            NodeServiceIdentifier _destination)
        {
            this.Body = _body;
            this.messageType = _type;
            this.ServiceSource = _source;
            this.ServiceDestination = _destination;
            this.SentTime = DateTime.Now;               //  set current timestamp
            this.Id = Guid.NewGuid();
        }
        /// <summary>
        /// 
        /// </summary>
        public void Dispose()
        {
            
        }
    }
}
